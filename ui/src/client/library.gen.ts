// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { arcaneClient, Setting, Library, Response } from ".";

export interface LibraryIndexRequest {
  page: number;
  limit: number;
}
export interface LibraryIndexResponse extends Response {
  result: Library[];
  total: number;
}
export const LibraryIndex = async (params: LibraryIndexRequest) => {
  const response = await arcaneClient.get(
    `/library/?page=${params.page}&limit=${params.limit}`,
  );

  if (!response.data) {
    throw new Error("response empty?");
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error("unknown error");
  }

  return response.data as LibraryIndexResponse;
};

export interface LibraryCreateRequest {
  subject: Library;
}
export interface LibraryCreateResponse extends Response {
  result: Library;
}
export const LibraryCreate = async (params: LibraryCreateRequest) => {
  const response = await arcaneClient.post(`/library/?`, params.subject);

  if (!response.data) {
    throw new Error("response empty?");
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error("unknown error");
  }

  return response.data as LibraryCreateResponse;
};

export interface LibraryShowRequest {
  id: string;
}
export interface LibraryShowResponse extends Response {
  result: Library;
}
export const LibraryShow = async (params: LibraryShowRequest) => {
  const response = await arcaneClient.get(`/library/${params.id}?`);

  if (!response.data) {
    throw new Error("response empty?");
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error("unknown error");
  }

  return response.data as LibraryShowResponse;
};

export interface LibraryUpdateRequest {
  id: string;
  subject: Library;
}
export interface LibraryUpdateResponse extends Response {
  result: Library;
}
export const LibraryUpdate = async (params: LibraryUpdateRequest) => {
  const response = await arcaneClient.put(
    `/library/${params.id}?`,
    params.subject,
  );

  if (!response.data) {
    throw new Error("response empty?");
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error("unknown error");
  }

  return response.data as LibraryUpdateResponse;
};

export interface LibrarySettingsRequest {
  id: string;
  setting: Setting;
}
export interface LibrarySettingsResponse extends Response {
  result: Library;
}
export const LibrarySettings = async (params: LibrarySettingsRequest) => {
  const response = await arcaneClient.patch(
    `/library/${params.id}?`,
    params.setting,
  );

  if (!response.data) {
    throw new Error("response empty?");
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error("unknown error");
  }

  return response.data as LibrarySettingsResponse;
};

export interface LibraryDeleteRequest {
  id: string;
}
export interface LibraryDeleteResponse extends Response {
  result: Library;
}
export const LibraryDelete = async (params: LibraryDeleteRequest) => {
  const response = await arcaneClient.delete(`/library/${params.id}?`);

  if (!response.data) {
    throw new Error("response empty?");
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error("unknown error");
  }

  return response.data as LibraryDeleteResponse;
};
