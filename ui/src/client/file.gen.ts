// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { arcaneClient, Setting, File, Response } from ".";

export interface FileIndexRequest {
  page: number;
  limit: number;
}
export interface FileIndexResponse extends Response {
  result: File[];
  total: number;
}
export const FileIndex = async (params: FileIndexRequest) => {
  const response = await arcaneClient.get(
    `/file/?page=${params.page}&limit=${params.limit}`,
  );

  if (!response.data) {
    throw new Error("response empty?");
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error("unknown error");
  }

  return response.data as FileIndexResponse;
};

export interface FileCreateRequest {
  subject: File;
}
export interface FileCreateResponse extends Response {
  result: File;
}
export const FileCreate = async (params: FileCreateRequest) => {
  const response = await arcaneClient.post(`/file/?`, params.subject);

  if (!response.data) {
    throw new Error("response empty?");
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error("unknown error");
  }

  return response.data as FileCreateResponse;
};

export interface FileShowRequest {
  id: string;
}
export interface FileShowResponse extends Response {
  result: File;
}
export const FileShow = async (params: FileShowRequest) => {
  const response = await arcaneClient.get(`/file/${params.id}?`);

  if (!response.data) {
    throw new Error("response empty?");
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error("unknown error");
  }

  return response.data as FileShowResponse;
};

export interface FileUpdateRequest {
  id: string;
  subject: File;
}
export interface FileUpdateResponse extends Response {
  result: File;
}
export const FileUpdate = async (params: FileUpdateRequest) => {
  const response = await arcaneClient.put(
    `/file/${params.id}?`,
    params.subject,
  );

  if (!response.data) {
    throw new Error("response empty?");
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error("unknown error");
  }

  return response.data as FileUpdateResponse;
};

export interface FileSettingsRequest {
  id: string;
  setting: Setting;
}
export interface FileSettingsResponse extends Response {
  result: File;
}
export const FileSettings = async (params: FileSettingsRequest) => {
  const response = await arcaneClient.patch(
    `/file/${params.id}?`,
    params.setting,
  );

  if (!response.data) {
    throw new Error("response empty?");
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error("unknown error");
  }

  return response.data as FileSettingsResponse;
};

export interface FileDeleteRequest {
  id: string;
}
export interface FileDeleteResponse extends Response {
  result: File;
}
export const FileDelete = async (params: FileDeleteRequest) => {
  const response = await arcaneClient.delete(`/file/${params.id}?`);

  if (!response.data) {
    throw new Error("response empty?");
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error("unknown error");
  }

  return response.data as FileDeleteResponse;
};
